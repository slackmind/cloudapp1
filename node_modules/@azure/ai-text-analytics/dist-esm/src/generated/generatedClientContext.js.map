{"version":3,"file":"generatedClientContext.js","sourceRoot":"","sources":["../../../src/generated/generatedClientContext.ts"],"names":[],"mappings":"AAAA;;;;;;;;GAQG;AAEH,OAAO,KAAK,QAAQ,MAAM,kBAAkB,CAAC;AAE7C,MAAM,WAAW,GAAG,0BAA0B,CAAC;AAC/C,MAAM,cAAc,GAAG,OAAO,CAAC;AAE/B,MAAM,OAAO,sBAAuB,SAAQ,QAAQ,CAAC,aAAa;IAIhE;;;;;;OAMG;IACH,YACE,WAAyE,EACzE,QAAgB,EAChB,OAAuC;QAEvC,IAAI,QAAQ,IAAI,SAAS,EAAE;YACzB,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;SAC/C;QACD,IAAI,WAAW,IAAI,SAAS,EAAE;YAC5B,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;SAClD;QAED,IAAI,CAAC,OAAO,EAAE;YACZ,OAAO,GAAG,EAAE,CAAC;SACd;QAED,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE;YACtB,MAAM,gBAAgB,GAAG,QAAQ,CAAC,wBAAwB,EAAE,CAAC;YAC7D,OAAO,CAAC,SAAS,GAAG,GAAG,WAAW,IAAI,cAAc,IAAI,gBAAgB,EAAE,CAAC;SAC5E;QAED,KAAK,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;QAE5B,IAAI,CAAC,OAAO,GAAG,gCAAgC,CAAC;QAChD,IAAI,CAAC,kBAAkB,GAAG,iCAAiC,CAAC;QAC5D,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACjC,CAAC;CACF","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\n\nconst packageName = \"@azure/ai-text-analytics\";\nconst packageVersion = \"5.0.0\";\n\nexport class GeneratedClientContext extends coreHttp.ServiceClient {\n  endpoint: string;\n  credentials: coreHttp.TokenCredential | coreHttp.ServiceClientCredentials;\n\n  /**\n   * Initializes a new instance of the GeneratedClientContext class.\n   * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:\n   * https://westus.api.cognitive.microsoft.com).\n   * @param credentials Subscription credentials which uniquely identify client subscription.\n   * @param [options] The parameter options\n   */\n  constructor(\n    credentials: coreHttp.TokenCredential | coreHttp.ServiceClientCredentials,\n    endpoint: string,\n    options?: coreHttp.ServiceClientOptions\n  ) {\n    if (endpoint == undefined) {\n      throw new Error(\"'endpoint' cannot be null.\");\n    }\n    if (credentials == undefined) {\n      throw new Error(\"'credentials' cannot be null.\");\n    }\n\n    if (!options) {\n      options = {};\n    }\n\n    if (!options.userAgent) {\n      const defaultUserAgent = coreHttp.getDefaultUserAgentValue();\n      options.userAgent = `${packageName}/${packageVersion} ${defaultUserAgent}`;\n    }\n\n    super(credentials, options);\n\n    this.baseUri = \"{Endpoint}/text/analytics/v3.0\";\n    this.requestContentType = \"application/json; charset=utf-8\";\n    this.endpoint = endpoint;\n    this.credentials = credentials;\n  }\n}\n"]}